#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Butschster\ContextGenerator;

use Butschster\ContextGenerator\ConfigLoader\Parser\ParserPluginRegistry;
use Butschster\ContextGenerator\Console\DisplayCommand;
use Butschster\ContextGenerator\Console\GenerateCommand;
use Butschster\ContextGenerator\Console\InitCommand;
use Butschster\ContextGenerator\Console\MCPServerCommand;
use Butschster\ContextGenerator\Console\SchemaCommand;
use Butschster\ContextGenerator\Console\SelfUpdateCommand;
use Butschster\ContextGenerator\Console\VersionCommand;
use Butschster\ContextGenerator\Lib\Content\ContentBuilderFactory;
use Butschster\ContextGenerator\Lib\Content\Renderer\MarkdownRenderer;
use Butschster\ContextGenerator\Lib\Content\Renderer\RendererInterface;
use Butschster\ContextGenerator\Lib\Files;
use Butschster\ContextGenerator\Lib\GithubClient\GithubClientInterface;
use Butschster\ContextGenerator\Lib\HttpClient\HttpClientFactory;
use Butschster\ContextGenerator\Lib\HttpClient\HttpClientInterface;
use Butschster\ContextGenerator\Lib\Logger\ConsoleLogger;
use Butschster\ContextGenerator\Lib\Logger\LoggerFactory;
use Butschster\ContextGenerator\McpServer\Routing\McpResponseStrategy;
use Butschster\ContextGenerator\Modifier\SourceModifierRegistry;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\HttpFactory;
use League\Route\Strategy\StrategyInterface;
use Monolog\ErrorHandler;
use Spiral\Core\Container;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Style\SymfonyStyle;

// -----------------------------------------------------------------------------
//  Prepare Global Environment
// -----------------------------------------------------------------------------

\error_reporting(E_ERROR);


// -----------------------------------------------------------------------------
//  Detect Environment
// -----------------------------------------------------------------------------

if (!\in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed', 'micro'], true)) {
    echo PHP_EOL . 'This app may only be invoked from a command line, got "' . PHP_SAPI . '"' . PHP_EOL;

    exit(1);
}


$insidePhar = \str_starts_with(__FILE__, 'phar://');


// -----------------------------------------------------------------------------
//  Load Composer's Autoloader
// -----------------------------------------------------------------------------
$vendorPath = (static function (): string {
    // OK, it's not, let give Composer autoloader a try!
    $possibleFiles = [
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../autoload.php',
        __DIR__ . '/vendor/autoload.php',
    ];
    $file = null;
    foreach ($possibleFiles as $possibleFile) {
        if (\file_exists($possibleFile)) {
            $file = $possibleFile;

            break;
        }
    }

    if ($file === null) {
        throw new \RuntimeException('Unable to locate autoload.php file.');
    }

    require_once $file;

    return $file;
})();


// -----------------------------------------------------------------------------
//  Execute An Application
// -----------------------------------------------------------------------------

$application = new Application();
$application->setDefaultCommand('generate');

$input = new ArgvInput();
$output = new SymfonyStyle($input, new ConsoleOutput());

$errorHandler = new ErrorHandler(new ConsoleLogger($output));
$errorHandler->registerExceptionHandler();
$errorHandler->registerErrorHandler();
$errorHandler->registerFatalHandler();

$vendorPath = \dirname($vendorPath) . '/../';
$versionFile = $vendorPath . '/version.json';
$appPath = \realpath($vendorPath);

$version = \file_exists($versionFile)
    ? \json_decode(\file_get_contents($versionFile), true)
    : [
        'version' => 'dev',
        'type' => 'phar',
    ];

$type = $version['type'] ?? 'phar';

if ($insidePhar) {
    $appPath = \getcwd();
}

$container = new Container();
$container->bindSingleton(
    Directories::class,
    new Directories(
        rootPath: $appPath,
        outputPath: $appPath . '/.context',
        configPath: $appPath,
        jsonSchemaPath: __DIR__ . '/json-schema.json',
    ),
);

$container->bindSingleton(ParserPluginRegistry::class, static fn() => ParserPluginRegistry::createDefault());
$container->bindSingleton(ConfigurationProviderFactory::class, ConfigurationProviderFactory::class);
$container->bindSingleton(FilesInterface::class, Files::class);
$container->bindSingleton(StrategyInterface::class, McpResponseStrategy::class);
$container->bindSingleton(
    SourceModifierRegistry::class,
    static fn(ModifierRegistryFactory $factory) => $factory->create(),
);
$container->bindSingleton(HttpClientInterface::class, static function () {
    $httpClient = new Client();
    $httpMessageFactory = new HttpFactory();
    return HttpClientFactory::create(
        $httpClient,
        $httpMessageFactory,
    );
});
$container->bindSingleton(RendererInterface::class, MarkdownRenderer::class);
$container->bindSingleton(ContentBuilderFactory::class, ContentBuilderFactory::class);
$container->bindSingleton(GithubClientInterface::class, static fn(
    HttpClientInterface $httpClient,
) => new GithubClientFactory(
    httpClient: $httpClient,
    defaultToken: \getenv('GITHUB_TOKEN') ?: null,
));

$container->bindSingleton(LoggerFactory::class, LoggerFactory::class);

// Register all commands
$application->add(
    $container->make(VersionCommand::class, [
        'version' => $version['version'] ?? 'dev',
    ]),
);

$application->add(
    $container->make(InitCommand::class),
);

$application->add(
    $container->make(SchemaCommand::class),
);

$application->add(
    $container->make(SelfUpdateCommand::class, [
        'version' => $version['version'] ?? 'dev',
        'binaryType' => $type,
    ]),
);

$application->add(
    $container->make(GenerateCommand::class),
);

$application->add(
    $container->make(DisplayCommand::class),
);

$application->add(
    $container->make(MCPServerCommand::class),
);

$application->run($input, $output);
