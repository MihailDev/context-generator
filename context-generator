#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Butschster\ContextGenerator;

use Butschster\ContextGenerator\ConfigLoader\Parser\ParserPluginRegistry;
use Butschster\ContextGenerator\Console\DisplayCommand;
use Butschster\ContextGenerator\Console\GenerateCommand;
use Butschster\ContextGenerator\Console\InitCommand;
use Butschster\ContextGenerator\Console\MCPServerCommand;
use Butschster\ContextGenerator\Console\SchemaCommand;
use Butschster\ContextGenerator\Console\SelfUpdateCommand;
use Butschster\ContextGenerator\Console\VersionCommand;
use Butschster\ContextGenerator\Lib\Content\ContentBuilderFactory;
use Butschster\ContextGenerator\Lib\Content\Renderer\MarkdownRenderer;
use Butschster\ContextGenerator\Lib\Files;
use Butschster\ContextGenerator\Lib\HttpClient\HttpClientFactory;
use Butschster\ContextGenerator\Lib\Logger\LoggerFactory;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\HttpFactory;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Style\SymfonyStyle;

// -----------------------------------------------------------------------------
//  Prepare Global Environment
// -----------------------------------------------------------------------------

\error_reporting(E_ALL & ~E_DEPRECATED & ~E_USER_DEPRECATED);


// -----------------------------------------------------------------------------
//  Detect Environment
// -----------------------------------------------------------------------------

if (!\in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed', 'micro'], true)) {
    echo PHP_EOL . 'This app may only be invoked from a command line, got "' . PHP_SAPI . '"' . PHP_EOL;

    exit(1);
}


$insidePhar = \str_starts_with(__FILE__, 'phar://');


// -----------------------------------------------------------------------------
//  Load Composer's Autoloader
// -----------------------------------------------------------------------------
$vendorPath = (static function (): string {
    // OK, it's not, let give Composer autoloader a try!
    $possibleFiles = [
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../autoload.php',
        __DIR__ . '/vendor/autoload.php',
    ];
    $file = null;
    foreach ($possibleFiles as $possibleFile) {
        if (\file_exists($possibleFile)) {
            $file = $possibleFile;

            break;
        }
    }

    if ($file === null) {
        throw new \RuntimeException('Unable to locate autoload.php file.');
    }

    require_once $file;

    return $file;
})();


// -----------------------------------------------------------------------------
//  Execute An Application
// -----------------------------------------------------------------------------

$application = new Application();
$application->setDefaultCommand('generate');

$input = new ArgvInput();
$output = new SymfonyStyle($input, new ConsoleOutput());

$vendorPath = \dirname($vendorPath) . '/../';
$versionFile = $vendorPath . '/version.json';
$appPath = \realpath($vendorPath);

$version = \file_exists($versionFile)
    ? \json_decode(\file_get_contents($versionFile), true)
    : [
        'version' => 'dev',
        'type' => 'phar',
    ];

$type = $version['type'] ?? 'phar';

if ($insidePhar) {
    $appPath = \getcwd();
}

// Create base services
$files = new Files();
$httpClient = new Client();
$httpMessageFactory = new HttpFactory();
$httpClientAdapter = HttpClientFactory::create(
    $httpClient,
    $httpMessageFactory,
);

// Create the factory chain for the GenerateCommand
$contentBuilderFactory = new ContentBuilderFactory(
    defaultRenderer: new MarkdownRenderer(),
);

$githubClientFactory = new GithubClientFactory(
    httpClient: $httpClientAdapter,
    defaultToken: \getenv('GITHUB_TOKEN') ?: null,
);

$variableResolverFactory = new VariableResolverFactory();
$modifierRegistryFactory = new ModifierRegistryFactory();

// Create the source fetcher registry factory with its dependencies
$sourceFetcherRegistryFactory = new SourceFetcherRegistryFactory(
    httpClient: $httpClientAdapter,
    contentBuilderFactory: $contentBuilderFactory,
    variableResolverFactory: $variableResolverFactory,
    githubClientFactory: $githubClientFactory,
);

// Create the document compiler factory with its dependencies
$documentCompilerFactory = new DocumentCompilerFactory(
    files: $files,
    sourceFetcherRegistryFactory: $sourceFetcherRegistryFactory,
    modifierRegistryFactory: $modifierRegistryFactory,
    contentBuilderFactory: $contentBuilderFactory,
);

$configProviderFactory = new ConfigurationProviderFactory(
    parserPluginRegistry: ParserPluginRegistry::createDefault(),
);

$logger = LoggerFactory::create(
    output: $output,
    loggingEnabled: $output->isVerbose() || $output->isDebug() || $output->isVeryVerbose(),
);

// Register all commands
$application->add(
    new VersionCommand(
        version: $version['version'] ?? 'dev',
        httpClient: $httpClientAdapter,
    ),
);

$application->add(
    new InitCommand(
        baseDir: $appPath,
        files: $files,
    ),
);

$application->add(
    new SchemaCommand(
        httpClient: $httpClientAdapter,
    ),
);

$application->add(
    new SelfUpdateCommand(
        version: $version['version'] ?? 'dev',
        httpClient: $httpClientAdapter,
        files: $files,
        binaryType: $type,
    ),
);

$application->add(
    new GenerateCommand(
        rootPath: $appPath,
        outputPath: $appPath . '/.context',
        files: $files,
        documentCompilerFactory: $documentCompilerFactory,
        configurationProviderFactory: $configProviderFactory,
    ),
);

$application->add(
    new DisplayCommand(
        rootPath: $appPath,
        files: $files,
        configurationProviderFactory: $configProviderFactory,
    ),
);

$application->add(
    new MCPServerCommand(
        rootPath: $appPath,
        jsonSchemaPath: __DIR__ . '/json-schema.json',
        files: $files,
        documentCompilerFactory: $documentCompilerFactory,
        configurationProviderFactory: $configProviderFactory,
    ),
);

$application->run($input, $output);
