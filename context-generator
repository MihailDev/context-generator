#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Butschster\ContextGenerator;

$insidePhar = \str_starts_with(__FILE__, 'phar://');

// load dependencies
$vendorPath = (static function (): string {
    // OK, it's not, let give Composer autoloader a try!
    $possibleFiles = [
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../autoload.php',
        __DIR__ . '/vendor/autoload.php',
    ];
    $file = null;
    foreach ($possibleFiles as $possibleFile) {
        if (\file_exists($possibleFile)) {
            $file = $possibleFile;

            break;
        }
    }

    if ($file === null) {
        throw new \RuntimeException('Unable to locate autoload.php file.');
    }

    require_once $file;

    return $file;
})();

use Butschster\ContextGenerator\Console\GenerateCommand;
use Butschster\ContextGenerator\Console\InitCommand;
use Butschster\ContextGenerator\Console\SchemaCommand;
use Butschster\ContextGenerator\Console\VersionCommand;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\HttpFactory;
use Symfony\Component\Console\Application;

$application = new Application();
$application->setDefaultCommand('generate');

$vendorPath = \dirname($vendorPath) . '/../';
$versionFile = $vendorPath . '/version.json';
$appPath = \realpath($vendorPath);

$version = \file_exists($versionFile) ? \json_decode(\file_get_contents($versionFile), true) : ['version' => 'dev'];

if ($insidePhar) {
    $appPath = \getcwd();
}

$httpClient = new Client();
$httpMessageFactory = new HttpFactory();

$application->add(
    new VersionCommand(
        version: $version['version'] ?? 'dev',
        httpClient: $httpClient,
        requestFactory: $httpMessageFactory,
    ),
);

$application->add(
    new InitCommand(
        baseDir: $appPath,
    ),
);

$application->add(
    new SchemaCommand(
        httpClient: $httpClient,
        requestFactory: $httpMessageFactory,
    ),
);

$application->add(
    new GenerateCommand(
        rootPath: $appPath,
        outputPath: $appPath . '/.context',
        httpClient: $httpClient,
        requestFactory: $httpMessageFactory,
        uriFactory: $httpMessageFactory,
    ),
);

$application->run();
